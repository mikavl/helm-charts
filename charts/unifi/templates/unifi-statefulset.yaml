apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "unifi.fullname" . }}
  labels:
    {{- include "unifi.labels" . | nindent 4 }}
spec:
  serviceName: unifi
  replicas: 1
  selector:
    matchLabels:
      {{- include "unifi.selectorLabels" . | nindent 6 }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: {{ .Values.unifi.persistence.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.unifi.persistence.size }}
  template:
    metadata:
      {{- with .Values.unifi.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "unifi.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.unifi.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "unifi.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.unifi.podSecurityContext | nindent 8 }}
      volumes:
        - name: tmp
          emptyDir: {}
        - name: run
          emptyDir: {}
      initContainers:
        - name: init
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: false
            runAsUser: 0
            capabilities:
              drop:
                - ALL
              add:
                - DAC_OVERRIDE
                - CHOWN
                - FOWNER
          image: "{{ .Values.unifi.image.repository }}:{{ .Values.unifi.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.unifi.image.pullPolicy }}
          command: [ "/usr/bin/install" ]
          args: [ "-d", "-m", "0700", "-o", "999", "-g", "999", "/unifi" ]
          volumeMounts:
            - name: data
              mountPath: /unifi
          resources:
            {{- toYaml .Values.unifi.resources | nindent 12 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.unifi.securityContext | nindent 12 }}
          image: "{{ .Values.unifi.image.repository }}:{{ .Values.unifi.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.unifi.image.pullPolicy }}
          ports:
            - name: stun
              protocol: UDP
              containerPort: 3478
            - name: unifi
              protocol: TCP
              containerPort: 8080
            - name: https
              protocol: TCP
              containerPort: 8443
          startupProbe:
            httpGet:
              path: /status
              port: https
              scheme: HTTPS
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /status
              port: https
              scheme: HTTPS
          readinessProbe:
            httpGet:
              path: /status
              port: https
              scheme: HTTPS
          resources:
            {{- toYaml .Values.unifi.resources | nindent 12 }}
          volumeMounts:
            - name: run
              mountPath: /run
            - name: tmp
              mountPath: /tmp
            - name: data
              mountPath: /unifi
      {{- with .Values.unifi.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.unifi.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.unifi.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
