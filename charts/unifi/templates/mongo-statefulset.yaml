apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "unifi.mongo.fullname" . }}
  labels:
    {{- include "unifi.mongo.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "unifi.mongo.selectorLabels" . | nindent 6 }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: {{ .Values.mongo.persistence.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.mongo.persistence.size }}
  template:
    metadata:
      {{- with .Values.mongo.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "unifi.mongo.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.mongo.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "unifi.mongo.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.mongo.podSecurityContext | nindent 8 }}
      volumes:
        - name: tmp
          emptyDir: {}
      initContainers:
        - name: mongo
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.mongo.image.repository }}:{{ .Values.mongo.image.tag }}"
          imagePullPolicy: {{ .Values.mongo.image.pullPolicy }}
          command: [ "/usr/bin/install" ]
          args: [ "-d", "-m", "0700", "-o", "1000", "-g", "1000", "/data/db" ]
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: data
              mountPath: /data/db
          resources:
            {{- toYaml .Values.mongo.resources | nindent 12 }}
      containers:
        - name: mongo
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.mongo.image.repository }}:{{ .Values.mongo.image.tag }}"
          imagePullPolicy: {{ .Values.mongo.image.pullPolicy }}
          command:
            - "mongod"
          args:
            - "--bind_ip_all"
            - "--nojournal"
            - "--wiredTigerCacheSizeGB"
            - "0.25"
          ports:
            - name: mongo
              containerPort: 27017
              protocol: TCP
          startupProbe:
            exec:
              command:
                - "mongo"
                - "--eval"
                - "db.runCommand('ping').ok"
                - "--quiet"
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            exec:
              command:
                - "mongo"
                - "--eval"
                - "db.runCommand('ping').ok"
                - "--quiet"
          readinessProbe:
            exec:
              command:
                - "mongo"
                - "--eval"
                - "db.runCommand('ping').ok"
                - "--quiet"
          volumeMounts:
            - name: data
              mountPath: /data/db
          resources:
            {{- toYaml .Values.mongo.resources | nindent 12 }}
      {{- with .Values.mongo.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.mongo.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.mongo.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
